#!/bin/bash
#
# GIT Unbreakable build
#
# Allows to safely push your changes by running a build command from a clone of your current project
#
# Source: https://pmiossec.github.io/git/2013/03/24/Git-Build/
#

set -u -o pipefail

readonly PROG_DIR=$(readlink -m $(dirname $0))
readonly LOCATION=$(pwd)
readonly REMOTE=${1:-origin}
readonly REMOTE_URL=$(git ls-remote --get-url $REMOTE)
readonly BRANCH=$(git symbolic-ref -q --short HEAD)
readonly REPO_DIR="$(git rev-parse --show-toplevel 2>/dev/null)"
readonly REPO_NAME=${REPO_DIR##*/}
readonly BUILD_DIR="/tmp/git-private-build/${REPO_NAME}"

rollback_wip_commit() {
    git log -1 | grep -q -c "WIP" && git reset HEAD~1
}

success() {
    local msg="$1"
    printf "\033[1;32m%s\033[0m\n" "$msg"
    command -v notify-send >/dev/null 2>&1 && notify-send -t 3000 --icon="${PROG_DIR}/success.png" "$REPO_NAME" "$msg"
    command -v growlnotify >/dev/null 2>&1 && growlnotify --image "${PROG_DIR}/success.png" "$REPO_NAME" -m "$msg"
    command -v growlnotify.exe >/dev/null 2>&1 && growlnotify.exe //i:"${PROG_DIR}/success.png" //t:"Git build [$REPO_NAME]" "$msg"
    exit 0
}

failure() {
    local msg="$1"
    printf "\033[1;31m%s\033[0m\n" "$msg"
    command -v notify-send >/dev/null 2>&1 && notify-send -t 3000 --icon="${PROG_DIR}/failure.png" "$REPO_NAME" "$msg"
    command -v growlnotify >/dev/null 2>&1 && growlnotify --image "${PROG_DIR}/failure.png" "$REPO_NAME" -m "$msg"
    command -v growlnotify.exe >/dev/null 2>&1 && growlnotify.exe //i:"${PROG_DIR}/failure.png" //t:"Git build [$REPO_NAME]" "$msg"
    exit 1
}

# Get command for build from Git config
BUILD_COMMAND=$(git config --get private-build.command)
if [ -z "$BUILD_COMMAND" ]; then
    failure "Build command not configured! Example: git config private-build.command \"mvn clean install\""
fi

if ! git rev-parse --abbrev-ref --symbolic-full-name "@{u}" 2>&1>/dev/null; then
    failure "No remote configured!"
fi

# Commit "work in progress"
git fetch $REMOTE
git add -A "$REPO_DIR"
git commit -m "WIP"
REBASE="$REMOTE/$BRANCH"
git branch -r | grep -q -c $REBASE || REBASE="$REMOTE/master"
echo "Rebasing with: $REBASE"
if ! git rebase --preserve-merges $REBASE; then
    git rebase --abort
    rollback_wip_commit
    failure "Unable to rebase!"
fi
rollback_wip_commit

# Clone private repo
rm -Rf "$BUILD_DIR"
git clone --local --shared --branch $BRANCH "$REPO_DIR" "$BUILD_DIR"

# Run private build
cd "$BUILD_DIR"
if ! eval "$BUILD_COMMAND"; then
    failure "Build failure!"
fi

# Push
if ! git push $REMOTE_URL $BRANCH; then
    failure "Unable to push!"
fi

# Update working directory
cd "$LOCATION"
git fetch $REMOTE
success "Build success!"
